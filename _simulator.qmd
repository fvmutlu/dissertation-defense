## Simulator

::: {style="font-size: 80%;"}
- **Motivation**: Lack of existing simulators with combination of requirements.
    - Support for multi-tiered caches with parameters of interest.
    - Queuing mechanisms for caches that contribute to delay.
    - High level of abstraction enabling quick development iteration.
- **Implementation**: Built using Python and the SimPy library for discrete event simulation.
    - Modular object-oriented design for *extensibility*.
    - Supports simultaneous simulations via *multiprocessing*.
:::

::: {.footer}
Simulator
:::

## Simulator {.smaller}

- **Components**: [Packet, Request, Link, Cache, Node, Network]{.code}
- [Request]{.code} stores metadata.
    - Object identifier, unique request token, statistics etc. 
- [Packet]{.code} encapsulates [Request]{.code}.
    - Binary direction flag; carries request uplink, response downlink.
- [Link]{.code} is a FIFO queue connecting two nodes.
    - Delays [Packet]{.code} delivery based on bandwidth in response direction.

::: {.footer}
Simulator
:::

## Simulator {.smaller}

- **Components**: [Packet, Request, Link, Cache, Node, Network]{.code}
- [Cache]{.code} is operated by a SimPy process controlling a *task queue*.
    - Read and write tasks processed based on transfer rate.

![](images/simcache.svg){width=75% height=75% fig-align="center"}

::: {.footer}
Simulator
:::

## Simulator {.smaller}

- **Components**: [Packet, Request, Link, Cache, Node, Network]{.code}
- [Node]{.code} encapsulates [Cache]{.code}s, FIB and PIT
    - Implements caching and forwarding policies.

![](images/simnode.svg){width=60% height=60% fig-align="center"}

::: {.footer}
Simulator
:::

## Simulator {.smaller}

- **Components**: [Packet, Request, Link, Cache, Node, Network]{.code}
- [Network]{.code} encapsulates [Node]{.code}s.
    - Initializes configuration and monitors events.

![](images/simnet.svg){width=65% height=65% fig-align="center"}

::: {.footer}
Simulator
:::

## Simulator {.smaller}

Codebase has many features for **ease of use** and **reproducibility**.

- Experiment config and data output in JSON format.
    - Specify parameter sweeps and combinations for multiprocess execution.
    - Each config set has unique hash; easy to query existing database.
- Library of functions to analyze data tailored to output schema.
- Docker container for easy deployment.
- GitHub Action for running experiments and generating plots.


```{.json filename="request_rate_config.json"}
{
    "fwd_pol"                : ["lrt","vip"],
    "cache_pol"              : ["lfu","lru","fifo","unif","mvip"],
    ... more parameters ...
    "request_rate"           : [10,12.5,15,17.5,20,22.5,25,27.5,30],
    "request_dist_param"     : [0.25,0.5,0.75],
    "cache_capacities"       : [[5,100],[5,125],[5,150]],
    ... more parameters ...
}
```

::: {.footer}
Simulator
:::

## Simulator

We abstract some aspects:
 
- Object-level simulation.
- Unbounded queues and lossless operation.
- Generic ICN architecture.
- Approximated storage and memory mechanisms.

Suitable for quickly prototyping object-level policies.

::: {.footer}
Simulator
:::