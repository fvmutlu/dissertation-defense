---
title: "Cost-aware Joint Caching and Forwarding in Networks with Diverse Cache Resources"
subtitle: "Faruk Volkan Mutlu - PhD Dissertation Defense Presentation"
author: "Research Advisor: Edmund Yeh<br>Committee Members: Elif Uysal, Stratis Ioannidis"
---

## Outline

- Primary Contribution
    -   **Introduction**: Motivation, Challenges, Related Work
    -   **Technical**: System Model, Optimization Framework
    -   **Practical**: Strategy, Experiments, Results
    -   **Proposed Work**
- Other Contributions
- Conclusion and Acknowledgements

::: {.footer}
Outline
:::

::: {.hidden}
$$
\newcommand{\mc}[1]{\mathcal{#1}}
\newcommand{\mb}[1]{\mathbf{#1}}
\newcommand{\nin}{n \in \mc{N}}
\newcommand{\kin}{k \in \mc{K}}
\newcommand{\jin}{j \in \mc{J}_n}
\newcommand{\knt}{^k_n(t)}
\newcommand{\knjt}{^k_{n_j}(t)}
\newcommand{\kjin}{(k,j) \in \mc{B}_{n,i}}
\newcommand{\iin}{i \in \mc{I}_n}
\newcommand{\ain}{a \in \mc{N}}
\newcommand{\bin}{b \in \mc{N}}
\newcommand{\abin}{(a,b) \in \mc{L}}
\newcommand{\about}{(a,b) \not\in \mc{L}^k}
\newcommand{\betasum}{\sum\limits ^{\sigma_n}_{i=1} \beta_{n,i}}
\newcommand{\betasumnl}{\sum ^{\sigma_n}_{i=1} \beta_{n,i}}
\newcommand{\multind}{\mathbf{1}_{[\kjin]}}
\newcommand{\betasumind}{\sum\limits ^{\sigma_n}_{i=1} \beta_{n,i}\mathbf{1}_{[\kjin]}}
\newcommand{\minpen}{\Psi(\boldsymbol{\lambda})}
\newcommand{\drift}{\Delta(\mathbf{V}(t))}
\newcommand{\norm}[1]{\lVert{#1}\rVert^2_2}
\newcommand{\pen}{\mathbb{E}[P(t)|\mathbf{V}(t)]}
\DeclareMathOperator*{\argmax}{arg\,max}
\DeclareMathOperator*{\argmin}{arg\,min}
\definecolor{neured}{RGB}{200, 16, 46}
$$
:::

# Introduction

{{< include _intro.qmd >}}

# System Model

::: {.notes}
That concludes the introduction and leads me into the system model that we're dealing with.
:::

{{< include _model.qmd >}}

# Virtual Plane Optimization

::: {.notes}
With the system model described, we will now look at our control algorithm in the virtual plane.
:::

{{< include _vp.qmd >}}

# Data Plane Strategy

::: {.notes}
- So there are several things about applying this virtual plane algorithm within the mechanics of the data plane
- Most obvious is that virtual plane decisions are made in discrete time slots, but of course the data plane decisions have to be reactive and continuous
- (Next slide)
:::

{{< include _dp.qmd >}}

# Experiments

::: {.notes}
- Alright, so how does our strategy fare in experimental evaluations
:::

{{< include _exp.qmd >}}

# Cache Read Rate Control

{{< include _sbw.qmd >}}

# Simulator

{{< include _simulator.qmd >}}

# Conclusion & Other Work

## Conclusion

::: {.incremental}
-   We address a critical and practical problem in scaling high-throughput caching networks
-   Our proposed model and approach achieves our goals and performs decently, but has shortcomings
-   Some improvements can be made by reiterating on technical details, further fine tuning requires experimentation
:::

::: {.footer}
Conclusion & Other Work
:::

::: {.notes}
- I should also note that we submitted a paper on this to MobiHoc last year which was rejected
- We're currently revising the paper for the upcoming ICC
:::

{{< include _hetnet.qmd >}}

# Appendices {visibility="uncounted"}

## Appendix A: Pseudocode

::: {style="font-size: 50%;"}
```pseudocode
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\Procedure{Quicksort}{$A, p, r$}
  \If{$p < r$}
    \State $q = $ \Call{Partition}{$A, p, r$}
    \State \Call{Quicksort}{$A, p, q - 1$}
    \State \Call{Quicksort}{$A, q + 1, r$}
  \EndIf
\EndProcedure
\Procedure{Partition}{$A, p, r$}
  \State $x = A[r]$
  \State $i = p - 1$
  \For{$j = p$ \To $r - 1$}
    \If{$A[j] < x$}
      \State $i = i + 1$
      \State exchange
      $A[i]$ with     $A[j]$
    \EndIf
    \State exchange $A[i]$ with $A[r]$
  \EndFor
\EndProcedure
\end{algorithmic}
\end{algorithm}
```
:::

::: {.footer}
Appendices
:::

## Appendix B: Model Notation {.smaller visibility="uncounted"}

| Notation | Definition |
|:--:|:--------|
|$\mathcal{G}$|Directed graph representing the network topology|
|$(\mathcal{N},\mathcal{L})$|Set of nodes and links in $\mathcal{G}$|
|$C_{ab}$|Transmission capacity (in objects/sec) of link $(a,b)$|
|$\mathcal{K}$|Set of data objects in the network|
|$\mc{S}(k)$|Content source node for $k \in \mathcal{K}$|
|$\mathcal{J}_n$ | Set of cache tiers at node $n \in \mathcal{N}$|
|$L_{n_j}$ | Size (in objects) of cache tier $j \in \mathcal{J}_n$ at $n$|
|$r_{n_j}$ | Read rate of tier $j$ at node $n$|
|$c^a_{n_j}$| Admission cost of tier $j$ at node $n$|
|$c^e_{n_j}$| Eviction cost of tier $j$ at node $n$|
: Table of Notations {tbl-colwidths="[20,80]"}

::: {.footer}
Appendices
:::

## Appendix B: Model Notation {.smaller visibility="uncounted"}

| Notation | Definition |
|:--:|:--------|
|$\lambda^k_n$|Exogenous request arrival rate for $k$ at $n$|
|$t$|Time slot referring to time interval $[t, t+1)$|
|$A^k_n(t)$|Number of exogenous requests for $k$ at $n$ during $t$|
|$s^k_{n_j}(t)$ | Caching state of $k$ in tier $j$ at $n$ at the beginning of $t$|
|$p^k_{n_j}(t)$ | Penalty incurred by the choice of $s^k_{n_j}(t)$|
|$p(t)$|Sum penalty incurred during $t$|
|$\omega$|Penalty importance weight|
|$V^k_n(t)$|VIP count for $k$ at $n$ during $t$|
|$\mathbf{V}(t)$|Vector of VIP queue states during $t$|
|$\mu^k_{ab}(t)$|Allocated rate of VIPs for $k$ over $(a,b)$ during $t$|
: Table of Notations {tbl-colwidths="[20,80]"}

::: {.footer}
Appendices
:::

## Appendix C: Analysis Notation {.smaller visibility="uncounted"}

| Notation | Definition |
|:--:|:--------|
|$A^k_{n,max}$| Finite value such that $A^k_n(t) \leq A^k_{n,max}$ for all $t$|
|$A_{n,max}$| Maximum total exogenous arrivals at node $n$ during $t$ across all $\kin$, i.e. $A_{n,max} \triangleq \sum_{\kin}A^k_{n,max}$|
|$\mu^{out}_{n,max}$| Maximum total allocated transmission rate for VIPs across all $(n,b) \in \mc{L}$, i.e. $\mu^{out}_{n,max} \triangleq \sum_{\bin}C_{nb}$|
|$\mu^{in}_{n,max}$| Maximum total allocated transmission rate for VIPs across all $(a,n) \in \mc{L}$, i.e. $\mu^{in}_{n,max} \triangleq \sum_{\bin}C_{an}$|
|$r_{n,max}$| Maximum total rate that can be served by all cache tiers at $n$|
|$\Psi(\boldsymbol{\lambda})$|Minimum time-average sum penalty achievable by a feasible and stabilizing randomized policy|

::: {.footer}
Appendices
:::